/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jhavepop = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"input":3,"optNewListLine":4,"operations":5,"EOF":6,"CREATEPREFIX":7,"(":8,"charList":9,"STRING":10,")":11,";":12,"block":13,"{":14,"}":15,"ifStatement":16,"IF":17,"booleanExpression":18,"optElseBlock":19,"whileLoop":20,"WHILE":21,"forLoop":22,"FOR":23,"optPointerAssignment":24,"pointerAssignment":25,"breakStatement":26,"BREAK":27,"ELSE":28,"operation":29,"controlOp":30,"pointerOp":31,"CHAR":32,",":33,"pointerDeclaration":34,"dataAssignment":35,"NODE":36,"ID":37,"pointerDeclarationRHS":38,"=":39,"pointerOrAllocOrNullExpression":40,"pointerExpressionOrNull":41,"NULL":42,"pointerExpression":43,"optChain":44,"allocationExpression":45,"CHAIN":46,"dataExpressionOrChar":47,"dataExpression":48,"DOT":49,"INFO":50,"NEW":51,"simpleBooleanExpression":52,"logicalConnector":53,"equalComparator":54,"comparator":55,"orderComparator":56,"<":57,"<=":58,">":59,">=":60,"EQUAL":61,"NOTEQUAL":62,"AND":63,"OR":64,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"CREATEPREFIX",8:"(",10:"STRING",11:")",12:";",14:"{",15:"}",17:"IF",21:"WHILE",23:"FOR",27:"BREAK",28:"ELSE",32:"CHAR",33:",",36:"NODE",37:"ID",39:"=",42:"NULL",46:"CHAIN",49:"DOT",50:"INFO",51:"NEW",57:"<",58:"<=",59:">",60:">=",61:"EQUAL",62:"NOTEQUAL",63:"AND",64:"OR"},
productions_: [0,[3,3],[4,6],[4,0],[13,3],[16,6],[20,5],[22,9],[24,1],[24,0],[26,2],[19,2],[19,0],[5,2],[5,0],[29,1],[29,2],[9,3],[9,0],[31,1],[31,1],[31,1],[34,3],[38,2],[38,0],[41,1],[41,1],[43,2],[25,3],[40,1],[40,1],[40,1],[44,1],[44,0],[47,1],[47,1],[48,3],[45,7],[35,3],[30,1],[30,1],[30,1],[30,1],[18,7],[18,1],[52,3],[52,3],[55,1],[55,1],[56,1],[56,1],[56,1],[56,1],[54,1],[54,1],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: if (typeof console !== 'undefined') 
              console.log("No syntax errors were detected.\n");
          else
              print("No syntax errors were detected.");
          this.$ = new Program($$[$0-2], new Block($$[$0-1]) );
          return this.$;
        
break;
case 2: this.$ = new OpCreateList(yylineno+1,extractHead($$[$0-5]),$$[$0-3],
                              $$[$0-2].substring(1,$$[$0-2].length-1)); 
      
break;
case 3: this.$ = null; 
break;
case 4: this.$ = new Block($$[$0-1]); 
break;
case 5:  this.$ = new OpIf(yylineno+1,$$[$0-3],$$[$0-1],$$[$0]); 
break;
case 6: this.$ = new OpWhile(yylineno+1,$$[$0-2],$$[$0]); 
break;
case 7: this.$ = new OpFor(yylineno+1,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 9: this.$ = null; 
break;
case 10: this.$ = new OpBreak(); 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = null; 
break;
case 13: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 14: this.$ = []; 
break;
case 17: $$[$0].unshift($$[$0-2].substring(1,2)); this.$ = $$[$0]; 
break;
case 18: this.$ = []; 
break;
case 22: this.$ = new OpDeclare(1+yylineno,$$[$0-1],$$[$0]); 
      
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = null; 
break;
case 25: this.$ = new PointerExpression(yylineno+1,null,-1); 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = new PointerExpression(yylineno+1,$$[$0-1],$$[$0]);
break;
case 28: this.$ = new OpPointerAssign(yylineno+1,$$[$0-2],$$[$0]); 
break;
case 29: this.$ = 'null'; 
break;
case 32: this.$ = countDerefOps($$[$0],"."); 
break;
case 33: this.$ = 0; 
break;
case 35: this.$ = new DataExpression(yylineno+1,null,$$[$0].substring(1,$$[$0].length-1)); 
break;
case 36: this.$ = new DataExpression(yylineno+1,$$[$0-2],null); 
break;
case 37: this.$ = new AllocationExpression(yylineno+1,$$[$0-3]); 
break;
case 38:  this.$ = new OpDataAssign(yylineno+1,$$[$0-2],$$[$0]); 
break;
case 43: this.$ = new CompoundBooleanExpression(yylineno+1,$$[$0-5],$$[$0-3],$$[$0-1]); 
break;
case 45: this.$ = new BooleanExpressionPointer(yylineno+1,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 46: this.$ = new BooleanExpressionData(yylineno+1,$$[$0-2],$$[$0-1],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:[2,3],7:[1,3],17:[2,3],21:[2,3],23:[2,3],27:[2,3],36:[2,3],37:[2,3]},{1:[3]},{5:4,6:[2,14],17:[2,14],21:[2,14],23:[2,14],27:[2,14],36:[2,14],37:[2,14]},{8:[1,5]},{6:[1,6],16:10,17:[1,17],20:11,21:[1,18],22:12,23:[1,19],25:15,26:13,27:[1,20],29:7,30:8,31:9,34:14,35:16,36:[1,21],37:[1,24],43:22,48:23},{9:25,10:[2,18],32:[1,26]},{1:[2,1]},{6:[2,13],15:[2,13],17:[2,13],21:[2,13],23:[2,13],27:[2,13],36:[2,13],37:[2,13]},{6:[2,15],15:[2,15],17:[2,15],21:[2,15],23:[2,15],27:[2,15],36:[2,15],37:[2,15]},{12:[1,27]},{6:[2,39],15:[2,39],17:[2,39],21:[2,39],23:[2,39],27:[2,39],36:[2,39],37:[2,39]},{6:[2,40],15:[2,40],17:[2,40],21:[2,40],23:[2,40],27:[2,40],36:[2,40],37:[2,40]},{6:[2,41],15:[2,41],17:[2,41],21:[2,41],23:[2,41],27:[2,41],36:[2,41],37:[2,41]},{6:[2,42],15:[2,42],17:[2,42],21:[2,42],23:[2,42],27:[2,42],36:[2,42],37:[2,42]},{12:[2,19]},{12:[2,20]},{12:[2,21]},{8:[1,28]},{8:[1,29]},{8:[1,30]},{12:[1,31]},{37:[1,32]},{39:[1,33],49:[1,34]},{39:[1,35]},{11:[2,33],12:[2,33],39:[2,33],44:36,46:[1,37],49:[2,33],61:[2,33],62:[2,33]},{10:[1,38]},{33:[1,39]},{6:[2,16],15:[2,16],17:[2,16],21:[2,16],23:[2,16],27:[2,16],36:[2,16],37:[2,16]},{8:[1,41],18:40,32:[1,48],37:[1,24],41:43,42:[1,45],43:46,47:44,48:47,52:42},{8:[1,41],18:49,32:[1,48],37:[1,24],41:43,42:[1,45],43:46,47:44,48:47,52:42},{12:[2,9],24:50,25:51,37:[1,24],43:52},{6:[2,10],15:[2,10],17:[2,10],21:[2,10],23:[2,10],27:[2,10],36:[2,10],37:[2,10]},{12:[2,24],38:53,39:[1,54]},{37:[1,24],40:55,42:[1,56],43:57,45:58,51:[1,59]},{50:[1,60]},{32:[1,48],37:[1,24],43:62,47:61,48:47},{11:[2,27],12:[2,27],39:[2,27],49:[2,27],61:[2,27],62:[2,27]},{11:[2,32],12:[2,32],39:[2,32],49:[2,32],61:[2,32],62:[2,32]},{11:[1,63]},{9:64,10:[2,18],32:[1,26]},{11:[1,65]},{32:[1,48],37:[1,24],41:43,42:[1,45],43:46,47:44,48:47,52:66},{11:[2,44],12:[2,44]},{54:67,61:[1,68],62:[1,69]},{54:72,55:70,56:71,57:[1,73],58:[1,74],59:[1,75],60:[1,76],61:[1,68],62:[1,69]},{11:[2,25],12:[2,25],61:[2,25],62:[2,25]},{49:[1,34],61:[2,26],62:[2,26]},{11:[2,34],12:[2,34],33:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34]},{11:[2,35],12:[2,35],33:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35]},{11:[1,77]},{12:[1,78]},{11:[2,8],12:[2,8]},{39:[1,33]},{12:[2,22]},{37:[1,24],40:79,42:[1,56],43:57,45:58,51:[1,59]},{11:[2,28],12:[2,28]},{11:[2,29],12:[2,29]},{11:[2,30],12:[2,30]},{11:[2,31],12:[2,31]},{36:[1,80]},{11:[2,36],12:[2,36],33:[2,36],39:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36]},{12:[2,38]},{49:[1,34]},{12:[1,81]},{10:[2,17]},{13:82,14:[1,83]},{11:[1,84]},{37:[1,24],41:85,42:[1,45],43:86},{32:[2,53],37:[2,53],42:[2,53]},{32:[2,54],37:[2,54],42:[2,54]},{32:[1,48],37:[1,24],43:62,47:87,48:47},{32:[2,47],37:[2,47]},{32:[2,48],37:[2,48]},{32:[2,49],37:[2,49]},{32:[2,50],37:[2,50]},{32:[2,51],37:[2,51]},{32:[2,52],37:[2,52]},{13:88,14:[1,83]},{8:[1,41],18:89,32:[1,48],37:[1,24],41:43,42:[1,45],43:46,47:44,48:47,52:42},{12:[2,23]},{8:[1,90]},{6:[2,2],17:[2,2],21:[2,2],23:[2,2],27:[2,2],36:[2,2],37:[2,2]},{6:[2,12],15:[2,12],17:[2,12],19:91,21:[2,12],23:[2,12],27:[2,12],28:[1,92],36:[2,12],37:[2,12]},{5:93,15:[2,14],17:[2,14],21:[2,14],23:[2,14],27:[2,14],36:[2,14],37:[2,14]},{53:94,63:[1,95],64:[1,96]},{11:[2,45],12:[2,45]},{11:[2,26],12:[2,26]},{11:[2,46],12:[2,46]},{6:[2,6],15:[2,6],17:[2,6],21:[2,6],23:[2,6],27:[2,6],36:[2,6],37:[2,6]},{12:[1,97]},{32:[1,48],37:[1,24],43:62,47:98,48:47},{6:[2,5],15:[2,5],17:[2,5],21:[2,5],23:[2,5],27:[2,5],36:[2,5],37:[2,5]},{13:99,14:[1,83]},{15:[1,100],16:10,17:[1,17],20:11,21:[1,18],22:12,23:[1,19],25:15,26:13,27:[1,20],29:7,30:8,31:9,34:14,35:16,36:[1,21],37:[1,24],43:22,48:23},{8:[1,101]},{8:[2,55]},{8:[2,56]},{11:[2,9],24:102,25:51,37:[1,24],43:52},{33:[1,103]},{6:[2,11],15:[2,11],17:[2,11],21:[2,11],23:[2,11],27:[2,11],36:[2,11],37:[2,11]},{6:[2,4],15:[2,4],17:[2,4],21:[2,4],23:[2,4],27:[2,4],28:[2,4],36:[2,4],37:[2,4]},{32:[1,48],37:[1,24],41:43,42:[1,45],43:46,47:44,48:47,52:104},{11:[1,105]},{42:[1,106]},{11:[1,107]},{13:108,14:[1,83]},{11:[1,109]},{11:[2,43],12:[2,43]},{6:[2,7],15:[2,7],17:[2,7],21:[2,7],23:[2,7],27:[2,7],36:[2,7],37:[2,7]},{11:[2,37],12:[2,37]}],
defaultActions: {6:[2,1],14:[2,19],15:[2,20],16:[2,21],53:[2,22],61:[2,38],64:[2,17],79:[2,23],95:[2,55],96:[2,56]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function extractHead(str) {
    var node = str.indexOf("Node");
    var equal = str.indexOf("=");
    return str.substring(node+4,equal).trim();
}
function countDerefOps(chain,del){
    return chain.split(del).length-1;
}


/*************************************************************/
/*                          AST nodes                        */
/*************************************************************/

//---------------------------------------------------------
function Program(list,ops) {
//---------------------------------------------------------
    this.list = list;
    this.ops = ops;
}
Program.prototype.accept = function() {
   return arguments[0].visitProgram(this);
};
 
//---------------------------------------------------------
function OpCreateList(line,head,list,tail) {
//---------------------------------------------------------
    Operation.call(this,line);   
    this.head = head;
    this.list = list;
    this.tail = tail;
}
OpCreateList.prototype = new Operation();
OpCreateList.prototype.constructor = OpCreateList;
OpCreateList.prototype.accept = function() { 
   return arguments[0].visitCreateList(this); 
};

//---------------------------------------------------------
function Block(ops) {
//---------------------------------------------------------
    this.ops = ops;
}
Block.prototype.execute = function () { };
Block.prototype.accept = function() { 
   return arguments[0].visitBlock(this); 
};

//---------------------------------------------------------
function Operation(line) {
//---------------------------------------------------------
    this.line = line;
}

//---------------------------------------------------------
function OpDeclare(line,id,rhs) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.id = id;    
    this.rhs = rhs;
}
OpDeclare.prototype = new Operation();
OpDeclare.prototype.constructor = OpDeclare;
OpDeclare.prototype.accept = function() { 
   return arguments[0].visitOpDeclare(this); 
};

//---------------------------------------------------------
function PointerExpression(line,id,length) {
//---------------------------------------------------------
    this.line = line;
    this.id = id;
    this.length = length;
}
PointerExpression.prototype.accept = function () { 
   return arguments[0].visitPointerExpression(this); 
};
PointerExpression.prototype.isNull = function() { 
     return this.id===null && this.length == -1;
};
PointerExpression.prototype.toString = function() {
     if (this.isNull()) {
         return "null";
     }
     else {
        var result = this.id;
	for(var i=0; i<this.length; i++)
           result += ".next";
	return result;
     }
};

//---------------------------------------------------------
function DataExpression(line,pexp,char) {
//---------------------------------------------------------
    this.line = line;
    this.pexp = pexp;
    this.char = char;
}
DataExpression.prototype.isCharacter = function() { 
     return this.pexp===null;
};
DataExpression.prototype.toString = function() {
     if (this.isCharacter())
         return "'" + this.char + "'";
     else {
	return this.pexp.toString() + ".info";
     }
};
DataExpression.prototype.accept = function () { 
   return arguments[0].visitDataExpression(this); 
};

//---------------------------------------------------------
function OpDataAssign(line,lhs,rhs) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.lhs = lhs;
    this.rhs = rhs;
}
OpDataAssign.prototype = new Operation();
OpDataAssign.prototype.constructor = OpDataAssign;
OpDataAssign.prototype.accept = function() { 
   return arguments[0].visitOpDataAssign(this); 
};

//---------------------------------------------------------
function OpPointerAssign(line,lhs,rhs) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.lhs = lhs;
    this.rhs = rhs;
}
OpPointerAssign.prototype = new Operation();
OpPointerAssign.prototype.constructor = OpPointerAssign;
OpPointerAssign.prototype.accept = function() { 
   return arguments[0].visitOpPointerAssign(this); 
};

//---------------------------------------------------------
function OpIf(line,bexp,thenB,elseB) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.bexp = bexp;
    this.thenB = thenB;
    this.elseB = elseB;
}
OpIf.prototype = new Operation();
OpIf.prototype.constructor = OpIf;
OpIf.prototype.accept = function () { 
    return arguments[0].visitOpIf(this);
};

//---------------------------------------------------------
function OpBreak(line) {
//---------------------------------------------------------
    Operation.call(this,line);
}
OpBreak.prototype = new Operation();
OpBreak.prototype.constructor = OpBreak;
OpBreak.prototype.accept = function () { 
    return arguments[0].visitOpBreak(this);
};

//---------------------------------------------------------
function OpWhile(line,bexp,body) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.bexp = bexp;
    this.body = body;
}
OpWhile.prototype = new Operation();
OpWhile.prototype.constructor = OpWhile;
OpWhile.prototype.accept = function () { 
    return arguments[0].visitOpWhile(this);
};

//---------------------------------------------------------
function AllocationExpression(line,info) {
//---------------------------------------------------------
    this.line = line;
    this.info = info;
}
AllocationExpression.prototype.toString = function () { 
     return "new Node( " + this.info.toString() + " , null )";
};
AllocationExpression.prototype.toStringAST = function () { 
     return "[Allocation Expr.: info is " + this.info.toString() + 
            " and next is null]";
};
AllocationExpression.prototype.accept = function () { 
   return arguments[0].visitAllocationExpression(this); 
};

//---------------------------------------------------------
function OpFor(line,init,bexp,inc,body) {
//---------------------------------------------------------
    Operation.call(this,line);
    this.init = init;
    this.bexp = bexp;
    this.inc = inc;
    this.body = body;
}
OpFor.prototype = new Operation();
OpFor.prototype.constructor = OpFor;
OpFor.prototype.accept = function () { 
    return arguments[0].visitOpFor(this);
};

//---------------------------------------------------------
function BooleanExpressionPointer(line,exp1,comp,exp2) {
//---------------------------------------------------------
    this.line = line;
    this.exp1 = exp1;
    this.comp = comp;
    this.exp2 = exp2;
}
BooleanExpressionPointer.prototype.toString = function () { 
    return this.exp1.toString() + " " + this.comp + " " + this.exp2.toString();
};
BooleanExpressionPointer.prototype.accept = function () { 
    return arguments[0].visitBooleanExpressionPointer(this);
};

//---------------------------------------------------------
function BooleanExpressionData(line,exp1,comp,exp2) {
//---------------------------------------------------------
    this.line = line;
    this.exp1 = exp1;
    this.comp = comp;
    this.exp2 = exp2;
}
BooleanExpressionData.prototype.toString = function () { 
    return this.exp1.toString() + " " + this.comp + " " + this.exp2.toString();
};
BooleanExpressionData.prototype.accept = function () { 
    return arguments[0].visitBooleanExpressionData(this);
};

//---------------------------------------------------------
function CompoundBooleanExpression(line,exp1,logicalOp,exp2) {
//---------------------------------------------------------
    this.line = line;
    this.exp1 = exp1;
    this.logicalOp = logicalOp;
    this.exp2 = exp2;
}
CompoundBooleanExpression.prototype.accept = function () { 
    return arguments[0].visitCompoundBooleanExpression(this);
};
CompoundBooleanExpression.prototype.toString = function() {
   return "(" + this.exp1.toString() + ") && (" + this.exp2.toString() + ")";
};

/*************************************************************/
/*                   PrintSourceVisitor                      */
/*************************************************************/

function PrintSourceVisitor(ast) {
    this.indentation = 0;
    this.tabWidth = 4;
}

parser.PrintSourceVisitor=PrintSourceVisitor;        // make visitor public

PrintSourceVisitor.prototype.indent= function () {
    var result = "";
    for(var i=0; i<this.indentation; i++) {
          result += " ";
    }
    return result;         
};

PrintSourceVisitor.prototype.visitProgram = function (program) {
    var result = this.indent();
    if (program.list !== null) {
       result += program.list.accept(this);
    }
    if (program.ops !== null) {
       result += program.ops.accept(this);
    }
    return result;
};

PrintSourceVisitor.prototype.visitCreateList= function(list) {
   var string = "Node ";
   string += list.head + " = Utils.createList( ";
   var charList = list.list;
   for(var i=0; i<charList.length; i++)
      string += "'" + charList[i] + "', ";
   string += "'" + list.tail + "' );\n";
   return string;
};

PrintSourceVisitor.prototype.visitBlock = function(block) {
   var result = "";
   for(var i=0; i<block.ops.length; i++) {
      result += block.ops[i].accept(this);
   }
   return result;
};

PrintSourceVisitor.prototype.visitOpDeclare = function(op) {
   var result =  this.indent();
   result += "Node " + op.id;
   if (op.rhs !== null)
     result += " = ";
   if (op.rhs === 'null') {
       result += op.rhs;
   } else if (op.rhs !== null) {
       result += op.rhs.toString();
   }
   result += ";\n";
   return result;
};

PrintSourceVisitor.prototype.visitPointerExpression = function(pexp) {
   return pexp.toString();
};

PrintSourceVisitor.prototype.visitDataExpression = function(dexp) {
   return dexp.toString();
};

PrintSourceVisitor.prototype.visitAllocationExpression = function(aexp) {
   return aexp.toString();
};

PrintSourceVisitor.prototype.visitOpBreak = function(op) {
   return this.indent() + "break;\n";
};

PrintSourceVisitor.prototype.visitBooleanExpressionPointer = function(bexp) {
   return bexp.toString();
};

PrintSourceVisitor.prototype.visitBooleanExpressionData = function(bexp) {
   return bexp.toString();
};

PrintSourceVisitor.prototype.visitOpIf = function(op) {
   var result =  this.indent();
   result += "if ( ";
   result += op.bexp.accept(this) + " ) {\n";
   this.indentation += this.tabWidth;
   result += op.thenB.accept(this);
   this.indentation -= this.tabWidth;
   result += this.indent() + "}";
   if (op.elseB !== null) {
      result += " else {\n";
      this.indentation += this.tabWidth;
      result += op.elseB.accept(this);
      this.indentation -= this.tabWidth;
      result += this.indent() + "}\n";
   } 
   else
      result += "\n";
   return result;
};

PrintSourceVisitor.prototype.visitOpWhile= function(op) {
   var result =  this.indent();
   result += "while ( ";
   result += op.bexp.toString() + " ) {\n";
   this.indentation += this.tabWidth;
   result += op.body.accept(this);
   this.indentation -= this.tabWidth;
   result += this.indent() + "}\n";
   return result;
};

PrintSourceVisitor.prototype.visitOpFor= function(op) {
   var result =  this.indent() + "for( ";
   if (op.init !== null) {
      result += op.init.accept(this).trim() + "\n";
      // trim to remove the leading space/indentation
   }
   else {
      result += "/* empty */;\n";
   }
   result += this.indent() + "     ";
   if (op.bexp !== null) {
      result += op.bexp.toString();
   }
   result += ";\n";
   result += this.indent() + "     ";
   if (op.inc !== null) {
      var tmp = op.inc.accept(this).trim();
      // trim() is to remove the leading space/indentation
      result += tmp.substring(0,tmp.length-1);
      // substring is to remove ";"
   }
   else {
      result += "/* empty */";
   }  
   result += "\n";
   result += this.indent() + "   ) {\n";

   this.indentation += this.tabWidth;
   result += op.body.accept(this);
   this.indentation -= this.tabWidth;

   result += this.indent() + "}\n";
   return result;
};

PrintSourceVisitor.prototype.visitOpPointerAssign = function(op) {
   var result =  this.indent();
   result += op.lhs.toString() + " = " + op.rhs.toString() + ";\n";
   return result;
};

PrintSourceVisitor.prototype.visitOpDataAssign = function(op) {
   var result =  this.indent();
   result += op.lhs.toString() + " = " + op.rhs.toString() + ";\n";
   return result;
};

/*************************************************************/
/*                   PrintAstVisitor                         */
/*************************************************************/

function PrintAstVisitor(ast) {
    this.indentation = 0;
    this.tabWidth = 4;
}
parser.PrintAstVisitor=PrintAstVisitor;         // make PrintAstVisitor public
PrintAstVisitor.prototype.indent= function () {
    var result = "";
    for(var i=0; i<this.indentation; i++) {
       if ( i % this.tabWidth == 1)
          result += ":";
       else
          result += " ";
    }
    return result;         
};

PrintAstVisitor.prototype.visitProgram = function (program) {
    var result = "";
    if (program.list !== null) {
       result += program.list.accept(this);
    }
    if (program.ops !== null) {
       result += program.ops.accept(this);
    }
    return result;
};

PrintAstVisitor.prototype.visitCreateList= function(list) {
   var string = "[CreateList]:\n";
   this.indentation += this.tabWidth;
   string += this.indent() + "Head pointer: " + list.head+ "\n";
   string += this.indent() + "List: ";
   var charList = list.list;
   for(var i=0; i<charList.length-1; i++)
      string += charList[i] + " -> ";
   string += charList[charList.length-1] + "\n";
   string += this.indent() + "Tail pointer: " + list.tail + "\n";
   this.indentation -= this.tabWidth;
   return string;
};

PrintAstVisitor.prototype.visitBlock = function(block) {
   var result = "[Block]\n";
   this.indentation += this.tabWidth;
   for(var i=0; i<block.ops.length-1; i++) {
      result += this.indent() + block.ops[i].accept(this) + "\n";
   }
   result += this.indent() + block.ops[block.ops.length-1].accept(this);
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpDeclare = function(op) {
   var result =  "[Declaration]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "Pointer name: " + op.id + "\n";
   result += this.indent() + "Initializer:\n";
   this.indentation += this.tabWidth;
   if (op.rhs === null)
     result += this.indent() + " /* none */";
   else if (op.rhs === "null") {
       result += this.indent() + "null";
   } else if (op.rhs !== null) {
       result += this.indent() + op.rhs.accept(this);
   }
   this.indentation -= this.tabWidth;
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitPointerExpression = function(pexp) {
   return pexp.toString();
};

PrintAstVisitor.prototype.visitDataExpression = function(dexp) {
   return dexp.toString();
};

PrintAstVisitor.prototype.visitAllocationExpression = function(aexp) {
   var result = "[AllocationExpression]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "Info field: " + aexp.info + "\n";
   result += this.indent() + "Next field: null";
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpBreak = function(op) {
   return "[Break]";
};

PrintAstVisitor.prototype.visitOpIf = function(op) {
   var result =  "[IfStatement]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "[BooleanExpression]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + op.bexp.accept(this) + "\n"; 
   this.indentation -= this.tabWidth;
   result += this.indent() + "[ThenBlock]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + op.thenB.accept(this) + "\n";
   this.indentation -= this.tabWidth;
   result += this.indent() + "[ElseBlock]\n";
   this.indentation += this.tabWidth;
   if (op.elseB !== null) {
      result += this.indent() + op.elseB.accept(this);
   } 
   else
      result += this.indent() + "/* none */";
   this.indentation -= this.tabWidth;
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpWhile= function(op) {
   var result =  "[WhileLoop]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "[BooleanExpression]\n";
   this.indentation += this.tabWidth;
   if ( ! (op.bexp instanceof CompoundBooleanExpression) )
      result += this.indent();
   result += op.bexp.accept(this) + "\n";
   this.indentation -= this.tabWidth;
   result += this.indent() + "[Body]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + op.body.accept(this);
   this.indentation -= this.tabWidth;
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpFor= function(op) {
   var result =  "[ForLoop]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "[Initialization]\n";
   this.indentation += this.tabWidth;
   if (op.init !== null) {
      result += this.indent() + op.init.accept(this) + "\n";
   }
   else {
      result += this.indent() + "/* empty */;\n";
   }
   this.indentation -= this.tabWidth;
   result += this.indent() + "[BooleanExpression]\n";
   this.indentation += this.tabWidth;
   if (op.bexp !== null)
      result += this.indent() + op.bexp.accept(this) + "\n";
   else
      result += this.indent() + "/*empty */\n";
   this.indentation -= this.tabWidth;
   result += this.indent() + "[Increment]\n";
   this.indentation += this.tabWidth;
   if (op.inc !== null) {
      result += this.indent() + op.inc.accept(this);
   }
   else {
      result += this.indent() + "/* empty */";
   }  
   result += "\n";
   this.indentation -= this.tabWidth;
   result += this.indent() + "[Body]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + op.body.accept(this);
   this.indentation -= this.tabWidth;
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpPointerAssign = function(op) {
   var result =  "[PointerAssignment]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "LHS: " +  op.lhs.accept(this) + "\n";
   result += this.indent() + "RHS: ";
   if (op.rhs === "null")
      result += "null";
   else
      result += op.rhs.accept(this);
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitOpDataAssign = function(op) {
   var result =  "[DataAssignment]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "LHS: " +  op.lhs.accept(this) + "\n";
   result += this.indent() + "RHS: ";
   if (op.rhs.isCharacter())
      result += "'" + op.rhs.char + "'";
   else
      result += op.rhs.accept(this);
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitCompoundBooleanExpression = function(op) {
   var result = this.indent();
   if (op.logicalOp == "&&")
      result += "[And]\n";
   else if (op.logicalOp == "||")
      result += "[Or]\n";
   else
      result += "[*** Unknown logical connective ***]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + op.exp1.accept(this) + "\n";
   result += this.indent() + op.exp2.accept(this);
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitBooleanExpressionData = function(op) {
   var result = "";
   if (op.comp == "==")
      result += "[Equal]\n";
   else if (op.comp == "!=")
      result += "[NotEqual]\n";
   else result += "[*** unknown comparison operator ***]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "LHS: " + op.exp1.accept(this) + "\n";
   result += this.indent() + "RHS: " + op.exp2.accept(this);
   this.indentation -= this.tabWidth;
   return result;
};

PrintAstVisitor.prototype.visitBooleanExpressionPointer = function(op) {
   var result = "";
   if (op.comp == "==")
      result += "[Equal]\n";
   else if (op.comp == "!=")
      result += "[NotEqual]\n";
   else result += "[*** unknown comparison operator ***]\n";
   this.indentation += this.tabWidth;
   result += this.indent() + "LHS: " + op.exp1.accept(this) + "\n";
   result += this.indent() + "RHS: " + op.exp2.accept(this);
   this.indentation -= this.tabWidth;
   return result;
};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return '*'
break;
case 2:return 8
break;
case 3:return 11
break;
case 4:return 14
break;
case 5:return 15
break;
case 6:return 61
break;
case 7:return 62
break;
case 8:return 39
break;
case 9:return 33
break;
case 10:return 12
break;
case 11:return 63
break;
case 12:return 64
break;
case 13:return 'LT'
break;
case 14:return 'LE'
break;
case 15:return 'GE'
break;
case 16:return 'GT'
break;
case 17:return 6
break;
case 18:return 7           /* this ugly token is to avoid a SHIFT/REDUCE conflict in state 0 on 'Node' */
break;
case 19:return 36
break;
case 20:return 42
break;
case 21:return 'DELETE'
break;
case 22:return 51
break;
case 23:return 27
break;
case 24:return 21
break;
case 25:return 23
break;
case 26:return 17
break;
case 27:return 28
break;
case 28:return 50
break;
case 29:return 32
break;
case 30:return 10
break;
case 31:return 46
break;
case 32:return 37
break;
case 33:return 49
break;
case 34:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:,)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:$)/,/^(?:Node\s+([a-zA-Z$_])(([a-zA-Z$_])|([0-9]))*\s*=\s*Utils\.createList\b)/,/^(?:Node\b)/,/^(?:null\b)/,/^(?:delete\b)/,/^(?:new\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:info\b)/,/^(?:'(([a-zA-Z$_])|([0-9]))')/,/^(?:"(([a-zA-Z$_])|([0-9]))*")/,/^(?:(\.next)+)/,/^(?:([a-zA-Z$_])(([a-zA-Z$_])|([0-9]))*)/,/^(?:\.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jhavepop;
exports.Parser = jhavepop.Parser;
exports.parse = function () { return jhavepop.parse.apply(jhavepop, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}