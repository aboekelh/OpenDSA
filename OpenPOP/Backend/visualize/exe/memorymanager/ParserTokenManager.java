/* 
This file is part of JHAVE -- Java Hosted Algorithm Visualization
Environment, developed by Tom Naps, David Furcy (both of the
University of Wisconsin - Oshkosh), Myles McNally (Alma College), and
numerous other contributors who are listed at the http://jhave.org
site

JHAVE is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.

JHAVE is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with the JHAVE. If not, see:
<http://www.gnu.org/licenses/>.
*/

/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package exe.memorymanager;
import exe.*;
import java.io.*;
import java.util.*;

public class ParserTokenManager implements ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 43;
         }
         if ((active0 & 0x200000L) != 0L)
            return 51;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 6;
         }
         if ((active0 & 0x3700000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 50;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 2;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 44;
            return 39;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 46;
         if ((active0 & 0x1000000L) != 0L)
            return 59;
         return -1;
      case 1:
         if ((active0 & 0x800000000L) != 0L)
            return 50;
         if ((active0 & 0x3738000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 50;
         }
         return -1;
      case 2:
         if ((active0 & 0x3528000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active0 & 0x210000000L) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0x2520000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 50;
         }
         if ((active0 & 0x1008000000L) != 0L)
            return 50;
         return -1;
      case 4:
         if ((active0 & 0x500000000L) != 0L)
            return 50;
         if ((active0 & 0x2020000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 50;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 50;
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 50;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 50;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 50;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 50;
         }
         return -1;
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
            return 50;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 11;
            return 50;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 12;
            return 50;
         }
         return -1;
      case 13:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 13;
            return 50;
         }
         return -1;
      case 14:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 14;
            return 50;
         }
         return -1;
      case 15:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 15;
            return 50;
         }
         return -1;
      case 16:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 16;
            return 50;
         }
         return -1;
      case 17:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 17;
            return 50;
         }
         return -1;
      case 18:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 18;
            return 50;
         }
         return -1;
      case 19:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 19;
            return 50;
         }
         return -1;
      case 20:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 20;
            return 50;
         }
         return -1;
      case 21:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 21;
            return 50;
         }
         return -1;
      case 22:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos < 21)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 21;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_2(0, 25, 46);
      case 39:
         return jjStartNfaWithStates_2(0, 24, 59);
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         return jjStopAtPos(0, 20);
      case 44:
         return jjStopAtPos(0, 22);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x10L);
      case 59:
         return jjStopAtPos(0, 23);
      case 61:
         return jjStartNfaWithStates_2(0, 21, 51);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x1000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x2000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x100000000L);
      case 123:
         return jjStopAtPos(0, 18);
      case 125:
         return jjStopAtPos(0, 19);
      default :
         return jjMoveNfa_2(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x2030000000L);
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(1, 35, 50);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x208000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0x2008000000L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(2, 33, 50);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000L);
      case 119:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(2, 28, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(3, 27, 50);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 36, 50);
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa4_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(4, 32, 50);
         break;
      case 107:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 34, 50);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(5, 29, 50);
         break;
      case 119:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa9_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
private final int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
private final int jjMoveStringLiteralDfa10_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa11_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0);
}
private final int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0);
}
private final int jjMoveStringLiteralDfa12_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa13_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(11, active0);
}
private final int jjMoveStringLiteralDfa13_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(12, active0);
}
private final int jjMoveStringLiteralDfa14_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa15_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(13, active0);
}
private final int jjMoveStringLiteralDfa15_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(14, active0);
}
private final int jjMoveStringLiteralDfa16_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa17_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(15, active0);
}
private final int jjMoveStringLiteralDfa17_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa18_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(16, active0);
}
private final int jjMoveStringLiteralDfa18_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa19_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(17, active0);
}
private final int jjMoveStringLiteralDfa19_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa20_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(18, active0);
}
private final int jjMoveStringLiteralDfa20_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa21_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(19, active0);
}
private final int jjMoveStringLiteralDfa21_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 121:
         return jjMoveStringLiteralDfa22_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(20, active0);
}
private final int jjMoveStringLiteralDfa22_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa23_2(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_2(21, active0);
}
private final int jjMoveStringLiteralDfa23_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(23, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_2(22, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 50:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddTwoStates(73, 74);
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(85, 82);
                  else if (curChar == 46)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAdd(81);
                  }
                  else if (curChar == 39)
                     jjAddStates(0, 1);
                  else if (curChar == 61)
                     jjCheckNAdd(51);
                  else if (curChar == 33)
                     jjCheckNAdd(51);
                  else if (curChar == 36)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(46, 48);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if (curChar == 62)
                     jjCheckNAdd(55);
                  else if (curChar == 60)
                     jjCheckNAdd(55);
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if ((0x3ff001000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 46:
                  if (curChar == 34)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 8:
                  if (curChar == 38 && kind > 26)
                     kind = 26;
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 22:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(46, 48);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 34 && kind > 41)
                     kind = 41;
                  break;
               case 49:
                  if (curChar != 36)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 52:
                  if (curChar == 33)
                     jjCheckNAdd(51);
                  break;
               case 53:
                  if (curChar == 61)
                     jjCheckNAdd(51);
                  break;
               case 54:
                  if ((0x5000000000000000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 55:
                  if (curChar == 61 && kind > 47)
                     kind = 47;
                  break;
               case 56:
                  if (curChar == 60)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if (curChar == 62)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if (curChar == 39)
                     jjAddStates(0, 1);
                  break;
               case 60:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 61:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar != 44)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 69:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 44)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(66, 71);
                  break;
               case 71:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAddTwoStates(66, 71);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 76:
                  if (curChar != 46)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(81);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(81);
                  break;
               case 82:
                  if (curChar == 62)
                     jjCheckNAdd(81);
                  break;
               case 83:
                  if (curChar == 45)
                     jjCheckNAdd(82);
                  break;
               case 84:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(85, 82);
                  break;
               case 85:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 46:
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 0:
                  if ((0x200000002L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 1:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x800000008000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if (curChar == 124 && kind > 26)
                     kind = 26;
                  break;
               case 11:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116 && kind > 30)
                     kind = 30;
                  break;
               case 13:
               case 28:
                  if (curChar == 115)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 108 && kind > 31)
                     kind = 31;
                  break;
               case 38:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 76 && kind > 31)
                     kind = 31;
                  break;
               case 42:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(50);
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 77:
                  if (curChar != 116)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjAddStates(2, 3);
                  break;
               case 79:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 6;
         return jjMoveNfa_1(3, 0);
      case 32:
         jjmatchedKind = 5;
         return jjMoveNfa_1(3, 0);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 71:
         return jjMoveStringLiteralDfa1_1(0x4L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0x200L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x4L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x200L);
      default :
         return jjMoveNfa_1(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 0);
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa2_1(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa2_1(active0, 0xcL);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0xcL);
      default :
         break;
   }
   return jjMoveNfa_1(3, 1);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_1(active0, 0x208L);
      case 73:
         return jjMoveStringLiteralDfa3_1(active0, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x208L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 2);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 2);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_1(active0, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      case 87:
         return jjMoveStringLiteralDfa4_1(active0, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa4_1(active0, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa4_1(active0, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 3);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 3);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa5_1(active0, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa5_1(active0, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa5_1(active0, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa5_1(active0, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 4);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 4);
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa6_1(active0, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa6_1(active0, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 5);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 5);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_1(active0, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa7_1(active0, 0x200L);
      case 90:
         return jjMoveStringLiteralDfa7_1(active0, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa7_1(active0, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 6);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 6);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 7;
         }
         break;
      case 69:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa8_1(active0, 0x200L);
      case 100:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_1(3, 7);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_1(3, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(3, 7);
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(3, 8);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(8);
                  }
                  if (curChar == 13)
                     jjAddStates(4, 5);
                  break;
               case 4:
                  if (curChar == 43 && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar != 36)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (curChar == 13)
                     jjAddStates(4, 5);
                  break;
               case 11:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(8);
                  }
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x200000002L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 1:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(4, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  else if (curChar == 13)
                     jjCheckNAddTwoStates(2, 7);
                  else if (curChar == 36)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 13)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 13)
                     jjCheckNAddTwoStates(2, 7);
                  break;
               case 7:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  jjCheckNAddStates(6, 8);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(5);
                  }
                  break;
               case 0:
                  jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   59, 61, 78, 83, 11, 12, 0, 1, 3, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\57\57", null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\52", "\75", "\54", "\73", "\47", 
"\42", null, "\116\157\144\145", "\156\145\167", "\144\145\154\145\164\145", null, 
null, "\167\150\151\154\145", "\146\157\162", "\142\162\145\141\153", "\151\146", 
"\145\154\163\145", 
"\162\145\144\162\141\167\114\151\163\164\110\157\162\151\172\157\156\164\141\154\154\171\50\51", null, null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "IN_TITLE", 
   "IN_COMMENT", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, 2, -1, -1, 1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0x1ffbfffff879fL, 
};
static final long[] jjtoSkip = {
   0x7860L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[86];
private final int[] jjstateSet = new int[172];
protected char curChar;
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 2;
int defaultLexState = 2;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
